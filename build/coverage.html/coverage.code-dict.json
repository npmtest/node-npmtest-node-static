{"/home/travis/build/npmtest/node-npmtest-node-static/test.js":"/* istanbul instrument in package npmtest_node_static */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-static/lib.npmtest_node_static.js":"/* istanbul instrument in package npmtest_node_static */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_static = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_static = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-static/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-static && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_static */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_static\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_static.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_node_static.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_static.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_node_static.__dirname +\n                    '/lib.npmtest_node_static.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-static/node_modules/node-static/lib/node-static.js":"var fs     = require('fs')\n  , events = require('events')\n  , buffer = require('buffer')\n  , http   = require('http')\n  , url    = require('url')\n  , path   = require('path')\n  , mime   = require('mime')\n  , util   = require('./node-static/util');\n\n// Current version\nvar version = [0, 7, 9];\n\nvar Server = function (root, options) {\n    if (root && (typeof(root) === 'object')) { options = root; root = null }\n\n    // resolve() doesn't normalize (to lowercase) drive letters on Windows\n    this.root    = path.normalize(path.resolve(root || '.'));\n    this.options = options || {};\n    this.cache   = 3600;\n\n    this.defaultHeaders  = {};\n    this.options.headers = this.options.headers || {};\n\n    this.options.indexFile = this.options.indexFile || \"index.html\";\n\n    if ('cache' in this.options) {\n        if (typeof(this.options.cache) === 'number') {\n            this.cache = this.options.cache;\n        } else if (! this.options.cache) {\n            this.cache = false;\n        }\n    }\n\n    if ('serverInfo' in this.options) {\n        this.serverInfo = this.options.serverInfo.toString();\n    } else {\n        this.serverInfo = 'node-static/' + version.join('.');\n    }\n\n    this.defaultHeaders['server'] = this.serverInfo;\n\n    if (this.cache !== false) {\n        this.defaultHeaders['cache-control'] = 'max-age=' + this.cache;\n    }\n\n    for (var k in this.defaultHeaders) {\n        this.options.headers[k] = this.options.headers[k] ||\n                                  this.defaultHeaders[k];\n    }\n};\n\nServer.prototype.serveDir = function (pathname, req, res, finish) {\n    var htmlIndex = path.join(pathname, this.options.indexFile),\n        that = this;\n\n    fs.stat(htmlIndex, function (e, stat) {\n        if (!e) {\n            var status = 200;\n            var headers = {};\n            var originalPathname = decodeURI(url.parse(req.url).pathname);\n            if (originalPathname.length && originalPathname.charAt(originalPathname.length - 1) !== '/') {\n                return finish(301, { 'Location': originalPathname + '/' });\n            } else {\n                that.respond(null, status, headers, [htmlIndex], stat, req, res, finish);\n            }\n        } else {\n            // Stream a directory of files as a single file.\n            fs.readFile(path.join(pathname, 'index.json'), function (e, contents) {\n                if (e) { return finish(404, {}) }\n                var index = JSON.parse(contents);\n                streamFiles(index.files);\n            });\n        }\n    });\n    function streamFiles(files) {\n        util.mstat(pathname, files, function (e, stat) {\n            if (e) { return finish(404, {}) }\n            that.respond(pathname, 200, {}, files, stat, req, res, finish);\n        });\n    }\n};\n\nServer.prototype.serveFile = function (pathname, status, headers, req, res) {\n    var that = this;\n    var promise = new(events.EventEmitter);\n\n    pathname = this.resolve(pathname);\n\n    fs.stat(pathname, function (e, stat) {\n        if (e) {\n            return promise.emit('error', e);\n        }\n        that.respond(null, status, headers, [pathname], stat, req, res, function (status, headers) {\n            that.finish(status, headers, req, res, promise);\n        });\n    });\n    return promise;\n};\n\nServer.prototype.finish = function (status, headers, req, res, promise, callback) {\n    var result = {\n        status:  status,\n        headers: headers,\n        message: http.STATUS_CODES[status]\n    };\n\n    headers['server'] = this.serverInfo;\n\n    if (!status || status >= 400) {\n        if (callback) {\n            callback(result);\n        } else {\n            if (promise.listeners('error').length > 0) {\n                promise.emit('error', result);\n            }\n            else {\n              res.writeHead(status, headers);\n              res.end();\n            }\n        }\n    } else {\n        // Don't end the request here, if we're streaming;\n        // it's taken care of in `prototype.stream`.\n        if (status !== 200 || req.method !== 'GET') {\n            res.writeHead(status, headers);\n            res.end();\n        }\n        callback && callback(null, result);\n        promise.emit('success', result);\n    }\n};\n\nServer.prototype.servePath = function (pathname, status, headers, req, res, finish) {\n    var that = this,\n        promise = new(events.EventEmitter);\n\n    pathname = this.resolve(pathname);\n\n    // Make sure we're not trying to access a\n    // file outside of the root.\n    if (pathname.indexOf(that.root) === 0) {\n        fs.stat(pathname, function (e, stat) {\n            if (e) {\n                finish(404, {});\n            } else if (stat.isFile()) {      // Stream a single file.\n                that.respond(null, status, headers, [pathname], stat, req, res, finish);\n            } else if (stat.isDirectory()) { // Stream a directory of files.\n                that.serveDir(pathname, req, res, finish);\n            } else {\n                finish(400, {});\n            }\n        });\n    } else {\n        // Forbidden\n        finish(403, {});\n    }\n    return promise;\n};\n\nServer.prototype.resolve = function (pathname) {\n    return path.resolve(path.join(this.root, pathname));\n};\n\nServer.prototype.serve = function (req, res, callback) {\n    var that    = this,\n        promise = new(events.EventEmitter),\n        pathname;\n\n    var finish = function (status, headers) {\n        that.finish(status, headers, req, res, promise, callback);\n    };\n\n    try {\n        pathname = decodeURI(url.parse(req.url).pathname);\n    }\n    catch(e) {\n        return process.nextTick(function() {\n            return finish(400, {});\n        });\n    }\n\n    process.nextTick(function () {\n        that.servePath(pathname, 200, {}, req, res, finish).on('success', function (result) {\n            promise.emit('success', result);\n        }).on('error', function (err) {\n            promise.emit('error');\n        });\n    });\n    if (! callback) { return promise }\n};\n\n/* Check if we should consider sending a gzip version of the file based on the\n * file content type and client's Accept-Encoding header value.\n */\nServer.prototype.gzipOk = function(req, contentType) {\n    var enable = this.options.gzip;\n    if(enable &&\n        (typeof enable === 'boolean' ||\n            (contentType && (enable instanceof RegExp) && enable.test(contentType)))) {\n        var acceptEncoding = req.headers['accept-encoding'];\n        return acceptEncoding && acceptEncoding.indexOf(\"gzip\") >= 0;\n    }\n    return false;\n}\n\n/* Send a gzipped version of the file if the options and the client indicate gzip is enabled and\n * we find a .gz file mathing the static resource requested.\n */\nServer.prototype.respondGzip = function(pathname, status, contentType, _headers, files, stat, req, res, finish) {\n    var that = this;\n    if(files.length == 1 && this.gzipOk(req, contentType)) {\n        var gzFile = files[0] + \".gz\";\n        fs.stat(gzFile, function(e, gzStat) {\n            if(!e && gzStat.isFile()) {\n                //console.log('Serving', gzFile, 'to gzip-capable client instead of', files[0], 'new size is', gzStat.size, 'uncompressed size', stat.size);\n                var vary = _headers['Vary'];\n                _headers['Vary'] = (vary && vary != 'Accept-Encoding'?vary+', ':'')+'Accept-Encoding';\n                _headers['Content-Encoding'] = 'gzip';\n                stat.size = gzStat.size;\n                files = [gzFile];\n            } else {\n                //console.log('gzip file not found or error finding it', gzFile, String(e), stat.isFile());\n            }\n            that.respondNoGzip(pathname, status, contentType, _headers, files, stat, req, res, finish);\n        });\n    } else {\n        // Client doesn't want gzip or we're sending multiple files\n        that.respondNoGzip(pathname, status, contentType, _headers, files, stat, req, res, finish);\n    }\n}\n\nServer.prototype.parseByteRange = function(req, stat) {\n    var byteRange = {\n      from: 0,\n      to: 0,\n      valid: false\n    }\n\n    var rangeHeader = req.headers['range'];\n    var flavor = 'bytes=';\n\n    if (rangeHeader) {\n        if (rangeHeader.indexOf(flavor) == 0 && rangeHeader.indexOf(',') == -1) {\n            /* Parse */\n            rangeHeader = rangeHeader.substr(flavor.length).split('-');\n            byteRange.from = parseInt(rangeHeader[0]);\n            byteRange.to = parseInt(rangeHeader[1]);\n\n            /* Replace empty fields of differential requests by absolute values */\n            if (isNaN(byteRange.from) && !isNaN(byteRange.to)) {\n                byteRange.from = stat.size - byteRange.to;\n                byteRange.to = stat.size ? stat.size - 1 : 0;\n            } else if (!isNaN(byteRange.from) && isNaN(byteRange.to)) {\n                byteRange.to = stat.size ? stat.size - 1 : 0;\n            }\n\n            /* General byte range validation */\n            if (!isNaN(byteRange.from) && !!byteRange.to && 0 <= byteRange.from && byteRange.from < byteRange.to) {\n                byteRange.valid = true;\n            } else {\n                console.warn(\"Request contains invalid range header: \", rangeHeader);\n            }\n        } else {\n            console.warn(\"Request contains unsupported range header: \", rangeHeader);\n        }\n    }\n    return byteRange;\n}\n\nServer.prototype.respondNoGzip = function (pathname, status, contentType, _headers, files, stat, req, res, finish) {\n    var mtime           = Date.parse(stat.mtime),\n        key             = pathname || files[0],\n        headers         = {},\n        clientETag      = req.headers['if-none-match'],\n        clientMTime     = Date.parse(req.headers['if-modified-since']),\n        startByte       = 0,\n        length          = stat.size,\n        byteRange       = this.parseByteRange(req, stat);\n\n    /* Handle byte ranges */\n    if (files.length == 1 && byteRange.valid) {\n        if (byteRange.to < length) {\n\n            // Note: HTTP Range param is inclusive\n            startByte = byteRange.from;\n            length = byteRange.to - byteRange.from + 1;\n            status = 206;\n\n            // Set Content-Range response header (we advertise initial resource size on server here (stat.size))\n            headers['Content-Range'] = 'bytes ' + byteRange.from + '-' + byteRange.to + '/' + stat.size;\n\n        } else {\n            byteRange.valid = false;\n            console.warn(\"Range request exceeds file boundaries, goes until byte no\", byteRange.to, \"against file size of\", length, \"bytes\");\n        }\n    }\n\n    /* In any case, check for unhandled byte range headers */\n    if (!byteRange.valid && req.headers['range']) {\n        console.error(new Error(\"Range request present but invalid, might serve whole file instead\"));\n    }\n\n    // Copy default headers\n    for (var k in this.options.headers) {  headers[k] = this.options.headers[k] }\n    // Copy custom headers\n    for (var k in _headers) { headers[k] = _headers[k] }\n\n    headers['Etag']          = JSON.stringify([stat.ino, stat.size, mtime].join('-'));\n    headers['Date']          = new(Date)().toUTCString();\n    headers['Last-Modified'] = new(Date)(stat.mtime).toUTCString();\n    headers['Content-Type']   = contentType;\n    headers['Content-Length'] = length;\n\n    for (var k in _headers) { headers[k] = _headers[k] }\n\n    // Conditional GET\n    // If the \"If-Modified-Since\" or \"If-None-Match\" headers\n    // match the conditions, send a 304 Not Modified.\n    if ((clientMTime  || clientETag) &&\n        (!clientETag  || clientETag === headers['Etag']) &&\n        (!clientMTime || clientMTime >= mtime)) {\n        // 304 response should not contain entity headers\n        ['Content-Encoding',\n         'Content-Language',\n         'Content-Length',\n         'Content-Location',\n         'Content-MD5',\n         'Content-Range',\n         'Content-Type',\n         'Expires',\n         'Last-Modified'].forEach(function(entityHeader) {\n            delete headers[entityHeader];\n        });\n        finish(304, headers);\n    } else {\n\n        res.writeHead(status, headers);\n\n        this.stream(key, files, length, startByte, res, function (e) {\n            if (e) { return finish(500, {}) }\n            finish(status, headers);\n        });\n    }\n};\n\nServer.prototype.respond = function (pathname, status, _headers, files, stat, req, res, finish) {\n    var contentType = _headers['Content-Type'] ||\n                      mime.lookup(files[0]) ||\n                      'application/octet-stream';\n\n    if(this.options.gzip) {\n        this.respondGzip(pathname, status, contentType, _headers, files, stat, req, res, finish);\n    } else {\n        this.respondNoGzip(pathname, status, contentType, _headers, files, stat, req, res, finish);\n    }\n}\n\nServer.prototype.stream = function (pathname, files, length, startByte, res, callback) {\n\n    (function streamFile(files, offset) {\n        var file = files.shift();\n\n        if (file) {\n            file = path.resolve(file) === path.normalize(file)  ? file : path.join(pathname || '.', file);\n\n            // Stream the file to the client\n            fs.createReadStream(file, {\n                flags: 'r',\n                mode: 0666,\n                start: startByte,\n                end: startByte + (length ? length - 1 : 0)\n            }).on('data', function (chunk) {\n                // Bounds check the incoming chunk and offset, as copying\n                // a buffer from an invalid offset will throw an error and crash\n                if (chunk.length && offset < length && offset >= 0) {\n                    offset += chunk.length;\n                }\n            }).on('close', function () {\n                streamFile(files, offset);\n            }).on('error', function (err) {\n                callback(err);\n                console.error(err);\n            }).pipe(res, { end: false });\n        } else {\n            res.end();\n            callback(null, offset);\n        }\n    })(files.slice(0), 0);\n};\n\n// Exports\nexports.Server       = Server;\nexports.version      = version;\nexports.mime         = mime;\n\n\n\n","/home/travis/build/npmtest/node-npmtest-node-static/node_modules/node-static/lib/node-static/util.js":"var fs   = require('fs')\n  , path = require('path');\n\nexports.mstat = function (dir, files, callback) {\n    (function mstat(files, stats) {\n        var file = files.shift();\n\n        if (file) {\n            fs.stat(path.join(dir, file), function (e, stat) {\n                if (e) {\n                    callback(e);\n                } else {\n                    mstat(files, stats.concat([stat]));\n                }\n            });\n        } else {\n            callback(null, {\n                size: stats.reduce(function (total, stat) {\n                    return total + stat.size;\n                }, 0),\n                mtime: stats.reduce(function (latest, stat) {\n                    return latest > stat.mtime ? latest : stat.mtime;\n                }, 0),\n                ino: stats.reduce(function (total, stat) {\n                    return total + stat.ino;\n                }, 0)\n            });\n        }\n    })(files.slice(0), []);\n};\n"}